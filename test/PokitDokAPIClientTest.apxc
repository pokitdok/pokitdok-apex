/**
 * The PokitDokAPIClientTest class tests out the implmented API calls of the PokitDok
 * Platform.  Since APEX test classes are not permitted to access remote sites, the
 * responses from the method calls are all mocked.  The mocked responses are produced
 * by the PokitDokMockResponseGenerator.
 * 
 * Copyright (C) 2017, All Rights Reserved, PokitDok, Inc.
 * https://platform.pokitdok.com
 *
 * Please see the License.txt file for more information.
 * All other rights reserved.
 */
@isTest
public class PokitDokAPIClientTest {
   
    public final static String TEST_CLIENT_ID = 'ClientID';
    public final static String TEST_CLIENT_SECRET = 'ClientSecret';
    
    /**
     * The testAutoRenewalSetting method tests how the autoRenewSession flag is set in
     * the constructors. 
     */
    @isTest 
    static void testAutoRenewalSetting() {
        // Verify the Platform Cache Partition won't be used
        PokitDokAPIClient pokitDok = new PokitDokAPIClient(TEST_CLIENT_ID, TEST_CLIENT_SECRET);
        Boolean autoRenewSession = pokitDok.autoRenewSession;        
        System.assertEquals(autoRenewSession, false);
        
        pokitDok = new PokitDokAPIClient(TEST_CLIENT_ID, TEST_CLIENT_SECRET, false);
        autoRenewSession = pokitDok.autoRenewSession;
        System.assertEquals(autoRenewSession, false);
        
        // Verify the Platform Cache Partition will be used
        pokitDok = new PokitDokAPIClient(TEST_CLIENT_ID, TEST_CLIENT_SECRET, true);
        autoRenewSession = pokitDok.autoRenewSession;        
        System.assertEquals(autoRenewSession, true);
    }
    
    /**
     * The testGet method tests the retrieval of a response from a GET request.  Since this
     * test does not actually go across the wire, the actual Client ID / Client Secret 
     * credentials are _not_ required.  The mocked response will look like this:
     * 
     * {
     *     "data": [{
     *         "id": "11111111",
     *         "name": "eligibility"
     *     }]
     * }
     */
    @isTest 
    static void testGet() {
        // Set mock callout class 
        Test.setMock(HttpCalloutMock.class, new PokitDokMockResponseGenerator(false, false, 
                                                                              false));        
        PokitDokAPIClient pokitDok = new PokitDokAPIClient(TEST_CLIENT_ID, TEST_CLIENT_SECRET, 
                                                           true);
        String getRequestURL = PokitDokAPIClient.POKITDOK_BASE_URL + 
                               PokitDokAPIClient.ACTIVITIES_ENDPOINT;
        String getResponse = pokitDok.get(getRequestURL);
        
        // Verify just a few fields in the JSON response
        System.assert(getResponse != null);
        Boolean foundExpectedAcvitityID = False;
        Boolean foundExpectedActivityName = False;
        Integer activitiesFound = 0;
        
        // The response data is a list of dictionaries
        JSONParser parser = JSON.createParser(getResponse);
        while (parser.nextToken() != null) { 
            if ((parser.getCurrentToken() == JSONToken.FIELD_NAME) && 
                (parser.getText() == 'data')) {
                parser.nextToken();
                if (parser.getCurrentToken() == JSONToken.START_ARRAY) {       
                    while (parser.nextToken() != null) {
                        if ((parser.getCurrentToken() == JSONToken.FIELD_NAME) && 
                            (parser.getText() == 'id')) {
                            parser.nextToken();
                            if (parser.getText() == PokitDokMockResponseGenerator.ACTIVITIES_ID) {
                                foundExpectedAcvitityID = True;
                            }
                        }
                        if ((parser.getCurrentToken() == JSONToken.FIELD_NAME) && 
                            (parser.getText() == 'name')) {
                            parser.nextToken();
                            if (parser.getText() == PokitDokMockResponseGenerator.ACTIVITIES_NAME) {
                                foundExpectedActivityName = True;
                            }
                        }
                    }
                }
            }
        }
        System.assert(foundExpectedAcvitityID);
        System.assert(foundExpectedActivityName);
    }
    
    /**
     * The testFetchAccessToken method tests that the access token is on the response.
     * Since this test does not actually go across the wire, thge actual Client ID /
     * Client Secret credentials are _not_ required.
     */
    @isTest 
    static void testFetchAccessToken() {
        // Set mock callout class 
        Test.setMock(HttpCalloutMock.class, new PokitDokMockResponseGenerator(false, false, 
                                                                              false));
        PokitDokAPIClient pokitDok = new PokitDokAPIClient(TEST_CLIENT_ID, TEST_CLIENT_SECRET, 
                                                           true);
        String session_token = pokitDok.fetchAccessToken();
        
        // Verify the session access token has been set
        System.assertEquals(session_token, PokitDokMockResponseGenerator.ACCESS_TOKEN);
    }

    /**
     * The testEligibility method tests that the Activity ID and Correlation ID are on
     * the response.  Since this test does not actually go across the wire, thge actual 
     * Client ID / Client Secret credentials are _not_ required.  The JSON payload should
     * look like this:
     * 
     * {
     *     "member": {
     *         "birth_date": "1970-01-01",
     *         "first_name": "John",
     *         "last_name": "Smith",
     *         "id": "3141592653"
     *     },
     *     "provider": {
     *         "first_name": "Jane",
     *         "last_name": "Doe",
     *         "npi": "1467560003"
     *     },
     *     "trading_partner_id": "MOCKPAYER"
     * }
     */    
    @isTest static void testEligibility() {
        // Set mock callout class 
        Test.setMock(HttpCalloutMock.class, 
                     new PokitDokMockResponseGenerator(false, false, false));        
        PokitDokAPIClient pokitDok = new PokitDokAPIClient(TEST_CLIENT_ID, TEST_CLIENT_SECRET, 
                                                           true);
        
        // Create a test JSON request
        Map<String,Object> eligibilityRequest = new Map<String,Object>();
        
        Map<String,String> member = new Map<String,String>();
        member.put('birth_date', '1970-01-01');
        member.put('first_name', 'John');
        member.put('last_name', 'Smith');
        member.put('id', '3141592653');
        eligibilityRequest.put('member',member);
        
        Map<String,String> provider = new Map<String,String>();
        provider.put('first_name', 'Jane');
        provider.put('last_name', 'Doe');
        provider.put('npi', '1467560003');
        eligibilityRequest.put('provider',provider);
        
        eligibilityRequest.put('trading_partner_id','MOCKPAYER');        
        
        String eligibilityResponse = pokitDok.eligibility(JSON.serialize(eligibilityRequest));
        
        // Verify just a few fields in the JSON response
        System.assert(eligibilityResponse != null);
        String expectedActivityID = '';
        String expectedCorrelationID = '';
        
        JSONParser parser = JSON.createParser(eligibilityResponse);
        while (parser.nextToken() != null) {
            if ((parser.getCurrentToken() == JSONToken.FIELD_NAME) && 
                (parser.getText() == 'activity_id')) {
                parser.nextToken();
                expectedActivityID = parser.getText();
                System.assertEquals(expectedActivityID, 
                                    PokitDokMockResponseGenerator.ELIGIBILITY_ACTIVITY_ID);
            }
            if ((parser.getCurrentToken() == JSONToken.FIELD_NAME) && 
                (parser.getText() == 'correlation_id')) {
                parser.nextToken();
                expectedCorrelationID = parser.getText();
                System.assertEquals(expectedCorrelationID, 
                                    PokitDokMockResponseGenerator.ELIGIBILITY_CORRELATION_ID);
            }
        }        
    }

    /**
     * The testCalloutException method tests a borked HTTP connection.  The client 
     * will return a manufactured JSON message will include a JSON field called 
     * "error".
     */
    @isTest 
    static void testCalloutException() {
        // Set mock callout class 
        Test.setMock(HttpCalloutMock.class, 
                     new PokitDokMockResponseGenerator(true, false, false));        
        PokitDokAPIClient pokitDok = new PokitDokAPIClient(TEST_CLIENT_ID, TEST_CLIENT_SECRET, 
                                                           false);        

        // Create an empty test JSON request
        Map<String,Object> eligibilityRequest = new Map<String,Object>();
        String eligibilityResponse = pokitDok.eligibility(JSON.serialize(eligibilityRequest));
        
        // Verify there is an error message in the JSON response
        System.assert(eligibilityResponse != null);
        String expectedCalloutExceptionMessage = '';
        
        JSONParser parser = JSON.createParser(eligibilityResponse);
        while (parser.nextToken() != null) {
            if ((parser.getCurrentToken() == JSONToken.FIELD_NAME) && 
                (parser.getText() == 'error')) {
                parser.nextToken();
                expectedCalloutExceptionMessage = parser.getText();
                System.assertEquals(expectedCalloutExceptionMessage, 
                                    PokitDokAPIClient.CALLOUT_EXCEPTION_MESSAGE);
            }
        }
    }
    
    /**
     * The testUnsuccessfulResponse method tests an HTTP response with a status code
     * other than 200 and 401.  The client will simply return the error message it
     * received from the APIs.  The message will include a JSON field called "errors".
     */
    @isTest 
    static void testUnsuccessfulResponse() {
        // Set mock callout class 
        Test.setMock(HttpCalloutMock.class, 
                     new PokitDokMockResponseGenerator(false, true, false));        
        PokitDokAPIClient pokitDok = new PokitDokAPIClient(TEST_CLIENT_ID, TEST_CLIENT_SECRET, 
	                                                       false);

        // Create an empty test JSON request
        Map<String,Object> eligibilityRequest = new Map<String,Object>();
        String eligibilityResponse = pokitDok.eligibility(JSON.serialize(eligibilityRequest));
        
        // Verify there is an error message in the JSON response
        System.assert(eligibilityResponse != null);
        String expectedUnsuccessfulMessage = '';
        
        JSONParser parser = JSON.createParser(eligibilityResponse);
        while (parser.nextToken() != null) {
            if ((parser.getCurrentToken() == JSONToken.FIELD_NAME) && 
                (parser.getText() == 'errors')) {
                parser.nextToken();
                expectedUnsuccessfulMessage = parser.getText();
                System.assertEquals(expectedUnsuccessfulMessage, 
                                    PokitDokMockResponseGenerator.UNSUCCESSFUL_MESSAGE);
            }
        }
    }

    /**
     * The testSessionExpired method tests an HTTP response with a status code of 401.
     * The client will try to replay the request after reauthenticating.  
     * This is almost a complete.  Warm the cache with a fake session token to clear
     * first call to authenticate().  It will come back with a token from the cache.
     * When the actual request is made a 401 is returned, and the cache will be flushed
     * and the authenticate() will be called again.  In the real world, this will
     * succeed, but in this test, the second authenticate API call will also return
     * a 401 response as well, so technically the second transaction is not replayed.
     */
    @isTest 
    static void testSessionExpired() {
        // Warm the cache with a fake expired session token
        PokitDokSessionCacheManager sessionManager = new PokitDokSessionCacheManager(TEST_CLIENT_ID);
        sessionManager.putToken('EXPIRED_TOKEN');

        // Set mock callout class 
        Test.setMock(HttpCalloutMock.class, 
                     new PokitDokMockResponseGenerator(false, false, true));
        PokitDokAPIClient pokitDok = new PokitDokAPIClient(TEST_CLIENT_ID, TEST_CLIENT_SECRET, 
                                                           true);        

        // Create an empty test JSON request
        Map<String,Object> eligibilityRequest = new Map<String,Object>();
        String eligibilityResponse = pokitDok.eligibility(JSON.serialize(eligibilityRequest));
                
        // Verify there is an error message in the JSON response
        System.assert(eligibilityResponse != null);
        String expectedUnsuccessfulMessage = '';
        
        JSONParser parser = JSON.createParser(eligibilityResponse);
        while (parser.nextToken() != null) {
            if ((parser.getCurrentToken() == JSONToken.FIELD_NAME) && 
                (parser.getText() == 'errors')) {
                parser.nextToken();
                expectedUnsuccessfulMessage = parser.getText();
                System.assertEquals(expectedUnsuccessfulMessage, 
                                    PokitDokMockResponseGenerator.SESSION_EXPIRED_MESSAGE);
            }
        }
    } 
}
