/**
 * The PokitDokAPIClient is an object wrapper that makes requests to the PokitDok
 * Platform APIs on behalf of the calling APEX code.  
 * 
 * The PokitDokAPIClient simplifies authorization and access to the APIs by encapsulating
 * the OAuth dance.  The Client ID and Client Secret credentials passed into the 
 * constructor are obtained by signing up for free at https://platform.pokitdok.com.
 * 
 * Each method that implments a PokitDok Platform API call takes in a serialized JSON
 * request payload and returns a serialized response payload.  The calling code will
 * both generate the proper serialized JSON String to send to the wrapped API method,
 * as well as parse the serialized JSON String that is returned.
 * 
 * The endpoint for https://platform.pokitdok.com needs to be set up as a Remote Site.
 * For reference, see:
 * https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_callouts_remote_site_settings.htm
 * 
 * Copyright (C) 2016, All Rights Reserved, PokitDok, Inc.
 * https://platform.pokitdok.com
 *
 * Please see the License.txt file for more information.
 * All other rights reserved.
 */
public class PokitDokAPIClient {
    
    // URL endpoints
    public static final String POKITDOK_BASE_URL = 'https://platform.pokitdok.com/';
    public static final String API_VERSION = 'api/v4/';
    
    public static final String AUTHENTICATION_ENDPOINT = 'oauth2/token';
    public static final String ACTIVITIES_ENDPOINT = 'activities/';
    public static final String AUTHORIZATIONS_ENDPOINT = 'authorizations/';
    public static final String BENEFITS_ENROLLMENT_ENDPOINT = 'enrollment/';
    public static final String CASH_PRICES_ENDPOINT = 'prices/cash/';
    public static final String CLAIMS_ENDPOINT = 'claims/';
    public static final String CLAIMS_CONVERT_ENDPOINT = 'claims/convert/';
    public static final String CLAIMS_STATUS_ENDPOINT = 'claims/status/';
    public static final String ELIGIBILITY_ENDPOINT = 'eligibility/';
    public static final String ENROLLMENT_SNAPSHOT_ENDPOINT = 'enrollment/snapshot/';
    public static final String ICD_CONVERT_ENDPOINT = 'icd/convert/';
    public static final String IDENTITY_MANAGEMENT_ENDPOINT = 'identity/';    
    public static final String IDENTITY_PROOF_ENDPOINT = 'identity/proof/';
    public static final String IN_NETWORK_PHARMACIES_ENDPOINT = 'pharmacy/network/';
    public static final String INSURANCE_PRICES_ENDPOINT = 'prices/insurance/';
    public static final String MEDICAL_PROCEDURE_CODE_ENDPOINT = 'mpc/';
    public static final String OUT_OF_POCKET_ESTIMATE_ENDPOINT = 'oop/insurance-estimate/';
    public static final String OUT_OF_POCKET_LOAD_ENDPOINT = 'oop/insurance-load-price/';
    public static final String PHARMACY_FORMULARY_ENDPOINT = 'pharmacy/formulary/';
    public static final String PHARMACY_PLANS_ENDPOINT = 'pharmacy/plans/';
    public static final String PLANS_ENDPOINT = 'plans/';
    public static final String PROVIDERS_ENDPOINT = 'providers/';
    public static final String REFERRALS_ENDPOINT = 'referrals/';
    public static final String SCHEDULING_ENDPOINT = 'schedule/schedulers/';
    public static final String TRADING_PARTNERS_ENDPOINT = 'tradingpartners/';
    
    public static final String GET_METHOD = 'GET';
    public static final String POST_METHOD = 'POST';
    
    public static final String CALLOUT_EXCEPTION_MESSAGE = 'Unable to process your ' +
        'request at this time. The original request has been logged';
    
    // Session management
    private String clientID;
    private String clientSecret;
    public Boolean autoRenewSession { get; set; }
    public PokitDokSessionCacheManager sessionManager = null;
    
    /**
     * The constructor expects valid OAuth credentials.
     * 
     * @param the id is Client ID for the PokitDok Platform App
     * @param the secret is Client Secret for the PokitDok Platform App
     */
    public PokitDokAPIClient(String clientID, String clientSecret) {
        this.clientID = clientID;
        this.clientSecret = clientSecret;
        this.autoRenewSession = false;
    }

    /**
     * The constructor expects valid OAuth credentials and a flag to determine if the
     * access token should be cached and renewed when it expires.
     * 
     * @param the id is Client ID for the PokitDok Platform App
     * @param the secret is Client Secret for the PokitDok Platform App
     * @param should the session access token be cached and the session be renewed
     *        after the token expires
     */
    public PokitDokAPIClient(String clientID, String clientSecret, Boolean autoRenewSession) {
        this.clientID = clientID;
        this.clientSecret = clientSecret;
        this.autoRenewSession = autoRenewSession;
        
        if (autoRenewSession) {
            sessionManager = new PokitDokSessionCacheManager(clientID);

            // Make sure the Platform Cache is set up properly
            if (!sessionManager.cacheEnabled) {
                this.autoRenewSession = false;
            }
        }
    }
    
    /**
     * The getAPIURL method returns the fully constructed URL to reach the given PokitDok
     * API endpoint.  The endpoint might have parameters and arguments.
     * 
     * @param the endpoint is API endpoint in question
     * @return the destination URL
     */
    public String getAPIURL(String endpoint) {
        if (endpoint == AUTHENTICATION_ENDPOINT) {
            return POKITDOK_BASE_URL + AUTHENTICATION_ENDPOINT;
        } else {
            return POKITDOK_BASE_URL + API_VERSION + endpoint;
        }
    }
    
    
    /**
     * The request method implements an HTTPS request back to the PokitDok API servers.
     * 
     * @param the method is the HTTP method:  GET, POST, PUT, DELETE
     * @param the APIEndpoint is the URL of the target API endpoint
     * @param the requestPayload is the serialized JSON request
     * @return the serialized JSON response
     */
    public String request(String method, String APIEndpoint, String requestPayload) {
        Http http = new Http();
        HttpRequest request = new HttpRequest();
        HTTPResponse response = new HttpResponse();
        
        // Authenticate before making the API call
        String accessToken = fetchAccessToken();        
        if (accessToken != '') {
            // Set up the request to the PokitDok Platform POST endpoint
            request.setEndpoint(getAPIURL(APIEndpoint));
            request.setMethod(method);
            request.setHeader('Authorization', 'Bearer ' + accessToken);
            request.setHeader('Content-Type', 'application/json');
            
            // GET requests will default to POST, even if the body is set to '', resulting
            // in a 405 response
            if (request.getMethod() != GET_METHOD) {            	 
                request.setBody(requestPayload);
            }
            
            try {
                response = http.send(request);
            } catch(System.CalloutException e) {
                return processCalloutException(e, request);
            }
            
            // If the session has expired, flush the cache, renew the access token and
            // replay the transaction
            if (response.getStatusCode() == 401) {
                if (sessionManager.removeToken()) {
                    accessToken = fetchAccessToken();
                    if (accessToken != '') {
                        request.setHeader('Authorization', 'Bearer ' + accessToken);
                        try {
                            response = http.send(request);
                        } catch(System.CalloutException e) {
                            return processCalloutException(e, request);
                        }
                    }
                }
            }
            
            // Log bad responses            
            if (response.getStatusCode() != 200) {
                System.debug(Logginglevel.ERROR, 
                             '[PokitDokAPIClient]  Request: ' + request.getBody());
                System.debug(Logginglevel.ERROR, 
                             '[PokitDokAPIClient]  Response: ' + response.getBody());
            }
        }
        
        return response.getBody();        
    }
    
    /**
     * The get method implements the GET method.
     * 
     * @param the APIEndpoint is the URL of the target API endpoint
     * @return the serialized JSON response
     */
    public String get(String APIEndpoint) {        
        return request(GET_METHOD, APIEndpoint, null);
    }
    
    /**
     * The post method implements the POST method.
     * 
     * @param the APIEndpoint is the URL of the target API endpoint
     * @param the requestPayload is the serialized JSON request
     * @return the serialized JSON response
     */
    public String post(String APIEndpoint, String requestPayload) {
        return request(POST_METHOD, APIEndpoint, requestPayload);
    }
    
    /**
     * The fetchAccessToken method encapsulates OAuth requests and returns the session
     * access token to be used by subsequent API calls.
     * 
     * Authentication works one of two ways.  You can exercise the option to utilize the
     * Salesforce Platform Cache to store the session access token for future requests,
     * or you can authenticate with each request.  Caching is preferred if possible.
     * 
     * @return the session access token if authenticated; an empty String otherwise
     */
    public String fetchAccessToken() {
        String accessToken = '';
        
        // Check the cache for the access token
        if (autoRenewSession) {
            accessToken = sessionManager.getToken();
            if (accessToken != null) {
                return accessToken;
            }
        }
        
        // Retrieve the access token
        Http http = new Http();
        HttpRequest request = new HttpRequest();
        HTTPResponse response = new HttpResponse();
        
        // Set up the request to the PokitDok Platform OAuth endpoint
        request.setEndpoint(getAPIURL(AUTHENTICATION_ENDPOINT));
        request.setMethod('POST');        
        
        // Encode the Client ID / Client Secret combination and dump it in the header       
        Blob clientCredentials = Blob.valueOf(clientID + ':' + clientSecret);
        String encodedclientCredentials = EncodingUtil.base64Encode(clientCredentials);        
        String authorizationHeader = 'Basic ' + encodedclientCredentials;
        request.setHeader('Authorization', authorizationHeader);        
        request.setHeader('Content-Type', 'application/x-www-form-urlencoded');
        
        String body = 'grant_type=client_credentials';		        
        request.setBody(body);
        
        // Make the request to obtain the access token
        try {
            response = http.send(request);
        } catch(System.CalloutException e) {
            processCalloutException(e, request);
            return '';
        }
        
        // Dig out the access token from the response payload
        JSONParser parser = JSON.createParser(response.getBody());
        while (parser.nextToken() != null) {
            if ((parser.getCurrentToken() == JSONToken.FIELD_NAME) && 
                (parser.getText() == 'access_token')) {
                parser.nextToken();
                accessToken = parser.getText();

                // Cache the token for future requests
                if (autoRenewSession) {
                    sessionManager.putToken(accessToken);
                }
                
                return accessToken;                    
            }
        }

        return '';
    }
    
    /**
     * The eligibility method is a convenience function that performs an eligibility
     * check given a patient's PHI, a provider's information and the ID of the insurer.
     * 
     * @param the serializedJSON is request payload
     * @return the serialized JSON response
     */
    public String eligibility(String serializedJSON){        
        // Set up the request to the PokitDok Platform Eligibility endpoint        
        return post(ELIGIBILITY_ENDPOINT, serializedJSON);
    }
    
    /**
     * The processCalloutException method handles the event of a CalloutException being
     * thrown.  It spools out the exception message to the error log
     * 
     * @param the thrown CalloutException
     * @param the request that caused the exception to be thrown
     * @return the error message to be consumed programatically
     */
    private String processCalloutException(System.CalloutException e, 
                                           HTTPRequest request) {
        System.debug(Logginglevel.ERROR, 
                     '[PokitDokAPIClient.processCalloutException]  Error Message: ' + e);
        System.debug(Logginglevel.ERROR, 
                     '[PokitDokAPIClient.processCalloutException]  POST Request: ' + request.getBody());
        return '{ "error": ' + CALLOUT_EXCEPTION_MESSAGE + ' }';        
    }
}
